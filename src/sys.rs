/* automatically generated by rust-bindgen 0.60.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    fn test_field__locale_pctype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_pctype)
            )
        );
    }
    test_field__locale_pctype();
    fn test_field__locale_mb_cur_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_mb_cur_max)
            )
        );
    }
    test_field__locale_mb_cur_max();
    fn test_field__locale_lc_codepage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_lc_codepage)
            )
        );
    }
    test_field__locale_lc_codepage();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    fn test_field_locinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(locinfo)
            )
        );
    }
    test_field_locinfo();
    fn test_field_mbcinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(mbcinfo)
            )
        );
    }
    test_field_mbcinfo();
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    fn test_field__Wchar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Wchar)
            )
        );
    }
    test_field__Wchar();
    fn test_field__Byte() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Byte)
            )
        );
    }
    test_field__Byte();
    fn test_field__State() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_State)
            )
        );
    }
    test_field__State();
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kahypar_context_s {
    _unused: [u8; 0],
}
pub type kahypar_context_t = kahypar_context_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kahypar_hypergraph_s {
    _unused: [u8; 0],
}
pub type kahypar_hypergraph_t = kahypar_hypergraph_s;
pub type kahypar_hypernode_id_t = ::std::os::raw::c_uint;
pub type kahypar_hyperedge_id_t = ::std::os::raw::c_uint;
pub type kahypar_hypernode_weight_t = ::std::os::raw::c_int;
pub type kahypar_hyperedge_weight_t = ::std::os::raw::c_int;
pub type kahypar_partition_id_t = ::std::os::raw::c_int;
extern "C" {
    pub fn kahypar_context_new() -> *mut kahypar_context_t;
}
extern "C" {
    pub fn kahypar_context_free(kahypar_context: *mut kahypar_context_t);
}
extern "C" {
    pub fn kahypar_configure_context_from_file(
        kahypar_context: *mut kahypar_context_t,
        ini_file_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn kahypar_hypergraph_free(hypergraph: *mut kahypar_hypergraph_t);
}
extern "C" {
    pub fn kahypar_set_custom_target_block_weights(
        num_blocks: kahypar_partition_id_t,
        block_weights: *const kahypar_hypernode_weight_t,
        kahypar_context: *mut kahypar_context_t,
    );
}
extern "C" {
    pub fn kahypar_set_fixed_vertices(
        hypergraph: *mut kahypar_hypergraph_t,
        fixed_vertex_blocks: *const kahypar_partition_id_t,
    );
}
extern "C" {
    pub fn kahypar_create_hypergraph_from_file(
        file_name: *const ::std::os::raw::c_char,
        num_blocks: kahypar_partition_id_t,
    ) -> *mut kahypar_hypergraph_t;
}
extern "C" {
    pub fn kahypar_create_hypergraph(
        num_blocks: kahypar_partition_id_t,
        num_vertices: kahypar_hypernode_id_t,
        num_hyperedges: kahypar_hyperedge_id_t,
        hyperedge_indices: *const size_t,
        hyperedges: *const kahypar_hyperedge_id_t,
        hyperedge_weights: *const kahypar_hyperedge_weight_t,
        vertex_weights: *const kahypar_hypernode_weight_t,
    ) -> *mut kahypar_hypergraph_t;
}
extern "C" {
    pub fn kahypar_partition_hypergraph(
        kahypar_hypergraph: *mut kahypar_hypergraph_t,
        num_blocks: kahypar_partition_id_t,
        epsilon: f64,
        objective: *mut kahypar_hyperedge_weight_t,
        kahypar_context: *mut kahypar_context_t,
        partition: *mut kahypar_partition_id_t,
    );
}
extern "C" {
    pub fn kahypar_improve_hypergraph_partition(
        kahypar_hypergraph: *mut kahypar_hypergraph_t,
        num_blocks: kahypar_partition_id_t,
        epsilon: f64,
        objective: *mut kahypar_hyperedge_weight_t,
        kahypar_context: *mut kahypar_context_t,
        input_partition: *const kahypar_partition_id_t,
        num_improvement_iterations: size_t,
        improved_partition: *mut kahypar_partition_id_t,
    );
}
extern "C" {
    pub fn kahypar_read_hypergraph_from_file(
        file_name: *const ::std::os::raw::c_char,
        num_vertices: *mut kahypar_hypernode_id_t,
        num_hyperedges: *mut kahypar_hyperedge_id_t,
        hyperedge_indices: *mut *mut size_t,
        hyperedges: *mut *mut kahypar_hyperedge_id_t,
        hyperedge_weights: *mut *mut kahypar_hyperedge_weight_t,
        vertex_weights: *mut *mut kahypar_hypernode_weight_t,
    );
}
extern "C" {
    pub fn kahypar_partition(
        num_vertices: kahypar_hypernode_id_t,
        num_hyperedges: kahypar_hyperedge_id_t,
        epsilon: f64,
        num_blocks: kahypar_partition_id_t,
        vertex_weights: *const kahypar_hypernode_weight_t,
        hyperedge_weights: *const kahypar_hyperedge_weight_t,
        hyperedge_indices: *const size_t,
        hyperedges: *const kahypar_hyperedge_id_t,
        objective: *mut kahypar_hyperedge_weight_t,
        kahypar_context: *mut kahypar_context_t,
        partition: *mut kahypar_partition_id_t,
    );
}
extern "C" {
    pub fn kahypar_improve_partition(
        num_vertices: kahypar_hypernode_id_t,
        num_hyperedges: kahypar_hyperedge_id_t,
        epsilon: f64,
        num_blocks: kahypar_partition_id_t,
        vertex_weights: *const kahypar_hypernode_weight_t,
        hyperedge_weights: *const kahypar_hyperedge_weight_t,
        hyperedge_indices: *const size_t,
        hyperedges: *const kahypar_hyperedge_id_t,
        input_partition: *const kahypar_partition_id_t,
        num_improvement_iterations: size_t,
        objective: *mut kahypar_hyperedge_weight_t,
        kahypar_context: *mut kahypar_context_t,
        improved_partition: *mut kahypar_partition_id_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
